import requests
import json
from django.conf import settings
from .models import SMSVerification, UserLastCode
from django.contrib.auth.models import User
from django.utils import timezone


class SMSService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —á–µ—Ä–µ–∑ smsc.ru"""
    
    def __init__(self):
        self.login = "magosss"
        self.password = "77555577"
        self.base_url = "https://smsc.ru/sys/send.php"
    
    def send_sms(self, phone: str, message: str) -> dict:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS —á–µ—Ä–µ–∑ smsc.ru API
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79XXXXXXXXX
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            dict: –û—Ç–≤–µ—Ç –æ—Ç API smsc.ru
        """
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API smsc.ru
            params = {
                'login': self.login,
                'psw': self.password,
                'phones': phone,
                'mes': message,
                'fmt': 3,  # JSON —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
                'charset': 'utf-8'
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.get(self.base_url, params=params, timeout=10)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            result = response.json()
            
            print(f"SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {phone}: {result}")
            return result
            
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {e}")
            return {'error': str(e)}
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: {e}")
            return {'error': 'Invalid JSON response'}
    
    def send_verification_code(self, phone: str) -> dict:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_phone = ''.join(filter(str.isdigit, phone))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
        if not clean_phone.startswith('7') or len(clean_phone) != 11:
            return {'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}
        
        # –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –¥–ª—è –Ω–æ–º–µ—Ä–∞ 79999999999 –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
        if clean_phone == '79999999999':
            print(f"üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: SMS –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–ª—è {clean_phone}")
            print(f"üß™ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥: 1234")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –∑–∞–ø–∏—Å—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            verification, created = SMSVerification.objects.get_or_create(
                phone=clean_phone,
                defaults={'code': '1234', 'expires_at': timezone.now() + timezone.timedelta(minutes=5)}
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
            verification.code = '1234'
            verification.expires_at = timezone.now() + timezone.timedelta(minutes=5)
            verification.save()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                from .models import UserLastCode
                user = User.objects.get(username=clean_phone)
                UserLastCode.update_or_create_code(user, clean_phone, '1234')
                print(f"üíæ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
            except User.DoesNotExist:
                print(f"‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {clean_phone} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            return {
                'success': True,
                'message': '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)',
                'phone': clean_phone
            }
        
        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verification, created = SMSVerification.objects.get_or_create(
            phone=clean_phone,
            defaults={'code': '', 'expires_at': timezone.now()}
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        code = verification.generate_code()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        print(f"üî¢ SMS –∫–æ–¥ –¥–ª—è {clean_phone}: {code}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            from .models import UserLastCode
            user = User.objects.get(username=clean_phone)
            UserLastCode.update_or_create_code(user, clean_phone, code)
            print(f"üíæ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
        except User.DoesNotExist:
            print(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {clean_phone} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–¥ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}. –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
        result = self.send_sms(clean_phone, message)
        
        if 'error' not in result:
            return {
                'success': True,
                'message': '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                'phone': clean_phone
            }
        else:
            return result
    
    def verify_code(self, phone: str, code: str) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            code: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        clean_phone = ''.join(filter(str.isdigit, phone))
        
        # –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –¥–ª—è –Ω–æ–º–µ—Ä–∞ 79999999999 –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–¥ 1234
        if clean_phone == '79999999999' and code == '1234':
            print(f"üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ö–æ–¥ {code} –ø—Ä–∏–Ω—è—Ç –¥–ª—è {clean_phone}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            verification, created = SMSVerification.objects.get_or_create(
                phone=clean_phone,
                defaults={'code': '1234', 'expires_at': timezone.now() + timezone.timedelta(minutes=5)}
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
            verification.code = '1234'
            verification.expires_at = timezone.now() + timezone.timedelta(minutes=5)
            verification.is_verified = True
            verification.save()
            
            return {
                'success': True,
                'message': '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)',
                'phone': clean_phone
            }
        
        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        try:
            # –ò—â–µ–º –∑–∞–ø–∏—Å—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            verification = SMSVerification.objects.filter(
                phone=clean_phone,
                code=code
            ).latest('created_at')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥
            if verification.is_expired():
                return {'error': '–ö–æ–¥ –∏—Å—Ç–µ–∫'}
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
            verification.is_verified = True
            verification.save()
            
            return {
                'success': True,
                'message': '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                'phone': clean_phone
            }
            
        except SMSVerification.DoesNotExist:
            return {'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'}
        except Exception as e:
            return {'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'}
